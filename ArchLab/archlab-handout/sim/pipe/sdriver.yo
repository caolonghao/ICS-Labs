                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6c802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f79002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src , %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: c0f2faffffffffffffff | 	iaddq $-6,%rdx		# length -= 6
0x03c: 726201000000000000   | 	jl REM
                            | 
0x045:                      | Loop:
0x045: 50a70000000000000000 |     mrmovq (%rdi), %r10	# read val from src...
0x04f: 50b70800000000000000 | 	mrmovq 8(%rdi),%r11
0x059: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x063: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x065: 717800000000000000   | 	jle Copy		# if so, goto Copy:
0x06e: c0f00100000000000000 | 	iaddq $1,%rax
0x078:                      | Copy:
0x078: 40b60800000000000000 | 	rmmovq %r11,8(%rsi)
0x082: 50a71000000000000000 | 	mrmovq 16(%rdi),%r10
0x08c: 62bb                 | 	andq %r11,%r11
0x08e: 71a100000000000000   | 	jle Copy2
0x097: c0f00100000000000000 | 	iaddq $1,%rax
0x0a1:                      | Copy2:
0x0a1: 50b71800000000000000 | 	mrmovq 24(%rdi),%r11
0x0ab: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0b5: 62aa                 | 	andq %r10,%r10
0x0b7: 71ca00000000000000   | 	jle Copy3
0x0c0: c0f00100000000000000 | 	iaddq $1,%rax
0x0ca:                      | Copy3:
0x0ca: 40b61800000000000000 | 	rmmovq %r11,24(%rsi)
0x0d4: 50a72000000000000000 | 	mrmovq 32(%rdi),%r10
0x0de: 62bb                 | 	andq %r11,%r11
0x0e0: 71f300000000000000   | 	jle Copy4
0x0e9: c0f00100000000000000 | 	iaddq $1,%rax
0x0f3:                      | Copy4:
0x0f3: 50b72800000000000000 | 	mrmovq 40(%rdi),%r11
0x0fd: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x107: 62aa                 | 	andq %r10,%r10
0x109: 711c01000000000000   | 	jle Copy5
0x112: c0f00100000000000000 | 	iaddq $1,%rax
0x11c:                      | Copy5:
0x11c: 40b62800000000000000 | 	rmmovq %r11,40(%rsi)
0x126: 62bb                 | 	andq %r11,%r11
0x128: 713b01000000000000   | 	jle nLoop
0x131: c0f00100000000000000 | 	iaddq $1,%rax
0x13b:                      | nLoop:
0x13b: c0f73000000000000000 | 	iaddq $48,%rdi
0x145: c0f63000000000000000 | 	iaddq $48,%rsi
0x14f: c0f2faffffffffffffff | 	iaddq $-6,%rdx
0x159: 754500000000000000   | 	jge Loop
                            | 
0x162:                      | REM:
0x162: c0f20500000000000000 | 	iaddq $5,%rdx
0x16c: 728e02000000000000   | 	jl Done
0x175: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x17f: 50b70800000000000000 | 	mrmovq 8(%rdi),%r11
0x189: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x193: 62aa                 | 	andq %r10,%r10
0x195: 71a801000000000000   | 	jle RENPO
0x19e: c0f00100000000000000 | 	iaddq $1,%rax
0x1a8:                      | RENPO:
0x1a8: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x1b2: 728e02000000000000   | 	jl Done
0x1bb: 40b60800000000000000 | 	rmmovq %r11,8(%rsi)
0x1c5: 62bb                 | 	andq %r11,%r11
0x1c7: 71da01000000000000   | 	jle RENPO1
0x1d0: c0f00100000000000000 | 	iaddq $1,%rax
0x1da:                      | RENPO1:
0x1da: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x1e4: 728e02000000000000   | 	jl Done
0x1ed: 50a71000000000000000 |     mrmovq 16(%rdi), %r10
0x1f7: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x201: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x20b: 62aa                 | 	andq %r10,%r10
0x20d: 712002000000000000   | 	jle RENPO2
0x216: c0f00100000000000000 | 	iaddq $1,%rax
0x220:                      | RENPO2:
0x220: c0f2ffffffffffffffff | 	iaddq $-1,%rdx
0x22a: 728e02000000000000   | 	jl Done
0x233: 40b61800000000000000 | 	rmmovq %r11,24(%rsi)
0x23d: 62bb                 | 	andq %r11,%r11
0x23f: 715202000000000000   | 	jle Next
0x248: c0f00100000000000000 | 	iaddq $1,%rax
0x252:                      | 	Next:
0x252: c0f2ffffffffffffffff | 		iaddq $-1,%rdx
0x25c: 728e02000000000000   | 		jl Done
0x265: 50a72000000000000000 | 		mrmovq 32(%rdi), %r10
0x26f: 40a62000000000000000 | 		rmmovq %r10,32(%rsi)
0x279: 62aa                 | 		andq %r10,%r10
0x27b: 718e02000000000000   | 		jle Done
0x284: c0f00100000000000000 | 		iaddq $1,%rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x28e:                      | Done:
0x28e: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x28f:                      | End:
                            | #/* $end ncopy-ys */
0x28f:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x290:                      | 	.align 8
0x290:                      | src:
0x290: ffffffffffffffff     | 	.quad -1
0x298: feffffffffffffff     | 	.quad -2
0x2a0: 0300000000000000     | 	.quad 3
0x2a8: 0400000000000000     | 	.quad 4
0x2b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2c0:                      | 	.align 16
0x2c0:                      | Predest:
0x2c0: fadebc0000000000     | 	.quad 0xbcdefa
0x2c8:                      | dest:
0x2c8: abefcd0000000000     | 	.quad 0xcdefab
0x2d0: abefcd0000000000     | 	.quad 0xcdefab
0x2d8: abefcd0000000000     | 	.quad 0xcdefab
0x2e0: abefcd0000000000     | 	.quad 0xcdefab
0x2e8:                      | Postdest:
0x2e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2f0:                      | .align 8
                            | # Run time stack
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
                            | 
0x370:                      | Stack:
